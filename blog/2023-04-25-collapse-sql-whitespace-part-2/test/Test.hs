module Main (main) where

-- https://hackage.haskell.org/package/tasty
import Test.Tasty (TestName, TestTree, defaultMain, testGroup)

-- https://hackage.haskell.org/package/tasty-hunit
import Test.Tasty.HUnit ((@=?), testCase)

-- (experiment)
import Experiment (sqlCollapseWhitespace)

------------------------------------------------------------------------------

type OriginalQuery = String

type CollapsedQuery = String

data T = T TestName OriginalQuery CollapsedQuery

testSqlCollapseWhiteSpace :: TestTree
testSqlCollapseWhiteSpace = testGroup "sqlCollapseWhitespace"
    [ testCase name $ expected @=? sqlCollapseWhitespace source
    | T name source expected <- ts
    ]
  where
    ts :: [T]
    ts =
      [ T "empty"
          ""
          ""
      , T "ws-space"
          " "
          ""
      , T "ws-newline"
          "\n"
          ""
      , T "ws-mixed"
          "  \t  \n "
          ""
      , T "stdcomment-1"
          "-- comment"
          ""
      , T "stdcomment-2"
          "--comment\n"
          ""
      , T "stdcomment-3"
          "\t-- comment  \n  "
          ""
      , T "stdcomment-4"
          "--"
          ""
      , T "ccomment-1"
          "/* comment */"
          ""
      , T "ccomment-2"
          "\n/*\nmult-line\ncomment\n*/\n"
          ""
      , T "ccomment-nested"
          "/* outside /* inside */ outside */"
          ""
      , -- (invalid SQL)
        T "ccomment-not-closed"
          "/* outside /* inside */ broken"
          ""
      , T "sql-1"
          "SELECT one"
          "SELECT one"
      , T "sql-2"
          "SELECT one;"
          "SELECT one;"
      , T "sql-3"
          "SELECT  1-1;"
          "SELECT 1-1;"
      , T "sql-ws-1"
          "  SELECT  one;  "
          "SELECT one;"
      , T "sql-ws-2"
          "\tSELECT \t one;\n \t"
          "SELECT one;"
      , T "sql-ws-3"
          "\tSELECT \t one \t ;\n \t"
          "SELECT one ;"
      , T "sql-ws-4"
          "\nSELECT  one;\n"
          "SELECT one;"
      , T "sql-stdcomment-1"
          "-- comment\nSELECT  one;\n"
          "SELECT one;"
      , T "sql-stdcomment-2"
          "SELECT  1--comment"
          "SELECT 1"
      , T "sql-stdcomment-3"
          "SELECT  1--comment\n  AS  one;"
          "SELECT 1 AS one;"
      , T "sql-stdcomment-4"
          "SELECT  one; -- comment\n-- comment"
          "SELECT one;"
      , T "sql-ccomment-1"
          "/* comment */\nSELECT  one;\n"
          "SELECT one;"
      , T "sql-ccomment-2"
          "SELECT  1/* comment */"
          "SELECT 1"
      , T "sql-ccomment-3"
          "SELECT  1/* comment\ncomment */  AS  one;"
          "SELECT 1 AS one;"
      , T "sql-ccomment-4"
          "SELECT  one; /* comment\ncomment */"
          "SELECT one;"
      , T "sql-ccomment-not-closed"
          "SELECT  one; /* comment\ncomment */"
          "SELECT one;"
      , T "sql-multi-1"
          "SELECT  one;  SELECT  two;"
          "SELECT one;\nSELECT two;"
      , T "sql-multi-2"
          "\nSELECT  one;\nSELECT  two;\n"
          "SELECT one;\nSELECT two;"
      , T "sql-multi-comment-1"
          "\nSELECT  one; -- comment\n--comment\nSELECT  two;\n"
          "SELECT one;\nSELECT two;"
      , T "sql-multi-comment-2"
          "\nSELECT  1; /* comment */\n--comment\n/* comment */ SELECT  2;\n"
          "SELECT 1;\nSELECT 2;"
      , T "dqident"
          "SELECT  \"one  two\"  AS  foo;"
          "SELECT \"one  two\" AS foo;"
      , T "dqident-dqdq"
          "SELECT  \"\"\"  \"\"\"  AS  foo;"
          "SELECT \"\"\"  \"\"\" AS foo;"
      , -- (invalid SQL)
        T "dqident-not-closed"
          "SELECT  \"oops  AS  foo;"
          "SELECT \"oops  AS  foo;"
      , T "sqstring-1"
          "SELECT  '  '  AS  s;"
          "SELECT '  ' AS s;"
      , T "sqstring-2"
          "SELECT  '1'AS  one;"
          "SELECT '1'AS one;"
      , T "sqstring-3"
          "SELECT  '1'"
          "SELECT '1'"
      , T "sqstring-4"
          "SELECT  '1'\n"
          "SELECT '1'"
      , T "sqstring-5"
          "SELECT  '1', two"
          "SELECT '1', two"
      , T "sqstring-6"
          "SELECT  '1'\n  AS one;"
          "SELECT '1' AS one;"
      , T "sqstring-sqsq-1"
          "SELECT  '  ''  '  AS  s;"
          "SELECT '  ''  ' AS s;"
      , T "sqstring-sqsq-2"
          "SELECT  ''''''  AS  s;"
          "SELECT '''''' AS s;"
      , T "sqstring-stdcomment"
          "SELECT  'one'-- comment"
          "SELECT 'one'"
      , T "sqstring-ccomment-1"
          "SELECT  'one'/* comment */"
          "SELECT 'one'"
      , T "sqstring-ccomment-2"
          "SELECT  'one'/* comment */, two;"
          "SELECT 'one' , two;"
      , T "sqstring-not-stdcomment"
          "SELECT  ' -- comment '  AS  s;\n"
          "SELECT ' -- comment ' AS s;"
      , T "sqstring-not-ccomment"
          "SELECT  ' /* comment */ '  AS  s;\n"
          "SELECT ' /* comment */ ' AS s;"
      , T "sqstring-bs-not-escape"
          "SELECT  '  \\'  AS  s;"
          "SELECT '  \\' AS s;"
      , T "sqstring-ds"
          "SELECT  '  $  '  AS  s;"
          "SELECT '  $  ' AS s;"
      , T "sqstring-sc"
          "SELECT  '  ;  '  AS  s;"
          "SELECT '  ;  ' AS s;"
      , -- (invalid SQL)
        T "sqstring-not-closed"
          "SELECT  '  AS  s;"
          "SELECT '  AS  s;"
      , T "sqstring-concat-1"
          "SELECT  '1  2'\n'  3'  AS  s;"
          "SELECT '1  2  3' AS s;"
      , T "sqstring-concat-2"
          "SELECT  '1  2' \t \n \t '  3'  AS  s;"
          "SELECT '1  2  3' AS s;"
      , T "sqstring-concat-3"
          "SELECT  '1  2'  \n\n\n  '  3'  AS  s;"
          "SELECT '1  2  3' AS s;"
      , T "sqstring-concat-stdcomment"
          "SELECT  '1 ' --foo\n-- bar\n' 2 '\n-- baz\n' 3'  AS  s;"
          "SELECT '1  2  3' AS s;"
      , T "sqstring-concat-ccomment-2"
          "SELECT  '1 ' /* long\ncomment */\n' 2 '\n/* comment */ ' 3'  AS s;"
          "SELECT '1  2  3' AS s;"
      , -- (invalid SQL)
        T "sqstring-not-concat-1"
          "SELECT  'foo'  'bar'  AS  s;"
          "SELECT 'foo' 'bar' AS s;"
      , -- (invalid SQL)
        T "sqstring-not-concat-2"
          "SELECT  'foo'\nE'bar'  AS  s;"
          "SELECT 'foo' E'bar' AS s;"
      , -- (invalid SQL)
        T "sqstring-not-concat-3"
          "SELECT  'foo'\n$$bar$$  AS  s;"
          "SELECT 'foo' $$bar$$ AS s;"
      , T "estring-1"
          "SELECT  E'  1  2  '  AS  s;"
          "SELECT E'  1  2  ' AS s;"
      , T "estring-2"
          "SELECT  E'  \\t\\n  '  AS  s;"
          "SELECT E'  \\t\\n  ' AS s;"
      , T "estring-bsbs"
          "SELECT  E'  \\\\'  AS  s;"
          "SELECT E'  \\\\' AS s;"
      , T "estring-sqsq-1"
          "SELECT  E'  ''  '  AS  s;"
          "SELECT E'  ''  ' AS s;"
      , T "estring-sqsq-2"
          "SELECT  E''''''  AS  s;"
          "SELECT E'''''' AS s;"
      , T "estring-bssq"
          "SELECT  E'  \\'  '  AS  s;"
          "SELECT E'  \\'  ' AS s;"
      , -- (invalid SQL)
        T "estring-not-closed"
          "SELECT  E'  AS  s;"
          "SELECT E'  AS  s;"
      , T "ustring-1"
          "SELECT  U&'  \\0020  '  AS  s;"
          "SELECT U&'  \\0020  ' AS s;"
      , T "ustring-2"
          "SELECT  U&'\\+0030C6\\+0030B9\\+0030C8'  AS  s;"
          "SELECT U&'\\+0030C6\\+0030B9\\+0030C8' AS s;"
      , T "ustring-3"
          "SELECT  U&'!0061  !+000061'  UESCAPE  '!'  AS  s;"
          "SELECT U&'!0061  !+000061' UESCAPE '!' AS s;"
      , T "ustring-sqsq"
          "SELECT  U&'  ''  '  AS  s;"
          "SELECT U&'  ''  ' AS s;"
      , T "dsstring-1"
          "SELECT  $$  $$  AS  s;"
          "SELECT $$  $$ AS s;"
      , T "dsstring-2"
          "SELECT  $_$  $_$  AS  s;"
          "SELECT $_$  $_$ AS s;"
      , T "dsstring-sq"
          "SELECT  $_$  '  $_$  AS  s;"
          "SELECT $_$  '  $_$ AS s;"
      , T "dsstring-sqsq"
          "SELECT  $_$  ''  $_$  AS  s;"
          "SELECT $_$  ''  $_$ AS s;"
      , T "dsstring-bssq"
          "SELECT  $_$  \\'  $_$  AS  s;"
          "SELECT $_$  \\'  $_$ AS s;"
      , T "dsstring-ds"
          "SELECT  $_$  $  $_$  AS  s;"
          "SELECT $_$  $  $_$ AS s;"
      , T "dsstring-sc"
          "SELECT  $_$  ;  $_$  AS  s;"
          "SELECT $_$  ;  $_$ AS s;"
      , T "dsstring-not-stdcomment"
          "SELECT  $_$  -- foo  $_$  AS  s;"
          "SELECT $_$  -- foo  $_$ AS s;"
      , T "dsstring-not-ccomment"
          "SELECT  $_$  /* foo */  $_$  AS  s;"
          "SELECT $_$  /* foo */  $_$ AS s;"
      , T "dsstring-nested-1"
          "SELECT  $abcd$  $abc$  $abc$  $abcd$  AS  s;"
          "SELECT $abcd$  $abc$  $abc$  $abcd$ AS s;"
      , T "dsstring-nested-2"
          "SELECT  $abc$  $abcd$  $abcd$  $abc$  AS  s;"
          "SELECT $abc$  $abcd$  $abcd$  $abc$ AS s;"
      , -- (invalid SQL)
        T "dsstring-not-closed-1"
          "SELECT  $  AS  s;"
          "SELECT $  AS  s;"
      , -- (invalid SQL)
        T "dsstring-not-closed-2"
          "SELECT  $_$  AS  s;"
          "SELECT $_$  AS  s;"
      , -- (invalid SQL)
        T "dsstring-not-closed-3"
          "SELECT  $_$  $"
          "SELECT $_$  $"
      , T "parens-1"
          ( "CREATE  RULE  foo_update  AS  ON  UPDATE  TO  foo  DO " ++
            " (  SELECT  1;  SELECT  1  );  "
          )
          ( "CREATE RULE foo_update AS ON UPDATE TO foo DO " ++
            "( SELECT 1; SELECT 1 );"
          )
      , T "parens-2"
          ( "CREATE  RULE  foo_update  AS  ON  UPDATE  TO  foo  DO " ++
            " (\n  SELECT  1;\n  SELECT  1\n);\n" ++
            "CREATE  RULE  bar_update  AS  ON  UPDATE  TO  bar  DO " ++
            " (\n  SELECT  1;\n  SELECT  1\n);\n"
          )
          ( "CREATE RULE foo_update AS ON UPDATE TO foo DO " ++
            "( SELECT 1; SELECT 1 );\n" ++
            "CREATE RULE bar_update AS ON UPDATE TO bar DO " ++
            "( SELECT 1; SELECT 1 );"
          )
      ]

------------------------------------------------------------------------------

main :: IO ()
main = defaultMain $ testGroup "test"
    [ testSqlCollapseWhiteSpace
    ]
